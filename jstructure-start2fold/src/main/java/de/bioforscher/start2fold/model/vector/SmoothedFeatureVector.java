package de.bioforscher.start2fold.model.vector;

public class SmoothedFeatureVector extends FeatureVector {
    public SmoothedFeatureVector(double secondaryStructureElementSize, double localHydrogen, double localHydrophobic, double localBackbone, double localInteractions, double nonLocalHydrogen, double nonLocalHydrophobic, double nonLocalBackbone, double nonLocalInteractions, double energy, double egor, double rasa, double betweenness, double closeness, double clusteringCoefficient, double hydrogenBetweenness, double hydrogenCloseness, double hydrogenClusteringCoefficient, double hydrophobicBetweenness, double hydrophobicCloseness, double hydrophobicClusteringCoefficient, double convBetweenness, double convCloseness, double convClusteringCoefficient, double distinctNeighborhoods, double convDistinctNeighborhoods) {
        super(secondaryStructureElementSize, localHydrogen, localHydrophobic, localBackbone, localInteractions, nonLocalHydrogen, nonLocalHydrophobic, nonLocalBackbone, nonLocalInteractions, energy, egor, rasa, betweenness, closeness, clusteringCoefficient, hydrogenBetweenness, hydrogenCloseness, hydrogenClusteringCoefficient, hydrophobicBetweenness, hydrophobicCloseness, hydrophobicClusteringCoefficient, convBetweenness, convCloseness, convClusteringCoefficient, distinctNeighborhoods, convDistinctNeighborhoods);
    }
    // constructor without couplings
//        SmoothedFeatureVector(double secondaryStructureElementSize, double localHydrogen, double localHydrophobic, double localBackbone, double localInteractions, double nonLocalHydrogen, double nonLocalHydrophobic, double nonLocalBackbone, double nonLocalInteractions, double energy, double egor, double rasa, double betweenness, double closeness, double clusteringCoefficient, double hydrogenBetweenness, double hydrogenCloseness, double hydrogenClusteringCoefficient, double hydrophobicBetweenness, double hydrophobicCloseness, double hydrophobicClusteringCoefficient, double distinctNeighborhoods) {
//            super(secondaryStructureElementSize, localHydrogen, localHydrophobic, localBackbone, localInteractions, nonLocalHydrogen, nonLocalHydrophobic, nonLocalBackbone, nonLocalInteractions, energy, egor, rasa, betweenness, closeness, clusteringCoefficient, hydrogenBetweenness, hydrogenCloseness, hydrogenClusteringCoefficient, hydrophobicBetweenness, hydrophobicCloseness, hydrophobicClusteringCoefficient, distinctNeighborhoods);
//        }
    // constructor with couplings
//        public SmoothedFeatureVector(double secondaryStructureElementSize, double localHydrogen, double localHydrophobic, double localBackbone, double localInteractions, double nonLocalHydrogen, double nonLocalHydrophobic, double nonLocalBackbone, double nonLocalInteractions, double energy, double egor, double eccount, double cumstrength, double ecstrength, double conservation, double rasa, double betweenness, double closeness, double clusteringCoefficient, double hydrogenBetweenness, double hydrogenCloseness, double hydrogenClusteringCoefficient, double hydrophobicBetweenness, double hydrophobicCloseness, double hydrophobicClusteringCoefficient, double distinctNeighborhoods) {
//            super(secondaryStructureElementSize, localHydrogen, localHydrophobic, localBackbone, localInteractions, nonLocalHydrogen, nonLocalHydrophobic, nonLocalBackbone, nonLocalInteractions, energy, egor, eccount, cumstrength, ecstrength, conservation, rasa, betweenness, closeness, clusteringCoefficient, hydrogenBetweenness, hydrogenCloseness, hydrogenClusteringCoefficient, hydrophobicBetweenness, hydrophobicCloseness, hydrophobicClusteringCoefficient, distinctNeighborhoods);
//        }

}